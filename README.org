# #+TITLE: esp32 driver for ws813b 
#+Author: Andreas Ã–hman
#+OPTIONS: ^:nil
# #+OPTIONS: \n:t
#+LATEX_HEADER: \usepackage[parfill]{parskip}
* ws813b led strip driver

A ws813b led strip library written in C for the microcontroller esp32. This library is created to give
a complex set of visual effects with minimal effort from the user.

The library have a range of predefined functions which operates/changes the color of the leds
in different behaviours.  Theese functions belong to different *modes* which are operated by an engine.
The engine reads a configuration file and cotrols the execution of a *mode*.  Each mode can be enabled
in combination with one and another for a unique visual effect.

What to expect of this library:
- Ease to set the colors of any number of leds 
- Ease to divide the led strip into multiple sections of colors
- Complex visual effects by simply enabling modes in a configuration file
- Multiple configurations 
- TODO Modes which operates on desired sections

* Usage

For a super quick introduction see[[*Minimal Example][ Minimal Example]].

The library works by enabling and configuring *modes* which are enabled in the
config structure /led_config/. A mode is an visual effect applied to the led
strip, /e.g./ the mode *walk* which rotates the leds one step at a configurable
rate. Several modes can be enabled at the same time for a unique visual
effect. Each mode have some common configurations such as *rate*. *Rate* will
determine how often a function operates on the led strip. The modes are enables
by setting the respective variable (in the config) to a non-zero value.

The colors of the led strip are divided into sections and the number of leds which belong
to one section is automatically configured. 

/How to use in steps/:
0. Configure sdkconfig ( see [[*sdkconfig][sdkconfig]] ) 
1. Create an array of /led_config/
2. Set desired modes  ( see [[*init function][init function]] and [[*Config structures][Config structures]] )
3. Set desired colors ( see[[*Set colors][ Set colors]] )
4. Call *ledEngine()* with your /led_config/ array as argument.
5. Done!

The available modes  can be found under [[*Led Modes][Led Modes]] .

  
** sdkconfig
*CONFIG_FREERTOS_HZ* Must be set to 1000 in sdkconfig for the rate and frequency
variables to function as intended. If not set the the default is 100 and the
update rate might not be as fast as desired for some modes. It is however
possible to leave it as is.

*CONFIG_MAIN_TASK_STACK_SIZE* must be increased to accomodate the size of all the
structures. It is probably possible to use freertos /xCreateTask()/ to create a
task in which the library is used. This is the end goal inteded way of using the
library but it has not yet been tested.

** init function

Call *init()* with a /led_config/ array as argument to initialize the library. The
function is required to initialize the rmt library correctly by defining
*rmt_conf* and calling /rmt_config/ and /rmt_driver_install/ functions.  *Init()* 
will also initialize and allocate memory for a /led_struct/ array.

  TODO Add argument for pin out

- Library used: *driver/rmt.h*
- Variables and structures:

** TODO Set colors

To be added:
- Different ways to set the colors 
  - Repeating sections
  - Mixed sections
  - etc..
- Set new colors in runtime
- setFadeColors function

** TODO Minimal Example

* Config structures

This section describes all the structures in the library.

** Manually configure

Configuration structures which needs to be set manually. 

*** struct led_config

TODO rename to mode_config or modeConfig

The mode configuration structure.  Used to set modes and some basic configurations.
To enable a mode set its respective variable named after the mode to a non-zero value.
Each mode also have a set of configuration variables which needs to be set,  you can 
find documentation for each mode under[[*Led Modes][ Led Modes]].

There are some variables which need to be set to let the *init()* function know how
to initialize the library correctly. 

- Set length to number of leds you are gonna use on the led strip.
- Set /section_length/ to the number of section you are gonna use

/Note/:  Set the the /section_length/ so that /length/ is evenly divisible by /section_length/. 
It might cause errors if this is not true. A feature is to be implemented which 
handles this.

| variable       | type    | is required | function              |
|----------------+---------+-------------+-----------------------|
| length         | uint8_t | *yes*         | n of leds             |
| section_length | uint8_t | *yes*         | n of section          |
| section_offset | uint8_t | no          | *dont change*           |
| fadeRate       | uint8_t | no          | rate of function fade |
| !step          | uint8_t | no          | enable step           |
| fade           | uint8_t | no          | enable fade           |
| fadeRate       | uint8_t | no          | Rate of fade          |
| fadeWalk       | uint8_t | no          | enable of fadeWalk    |
| fadeWalkRate   | uint8_t | no          | Rate of fadeWalk      |
| !pulse         | uint8_t | no          | enable of pulse       |
| pulseRate      | uint8_t | no          | rat of pulse          |
| walk           | uint8_t | no          | enable of walk        |
| smooth         | uint8_t | no          | "smooths" the colors  |



*** section_colors_t

TODO rename to section_colors_t and make an struct section_colors 

The structure /section_colors_t/ is meant to be used as an array.  Each element
corresponds to one sections color. 

|----------+---------+---------------|
| *Variable* | *type*    | *fuctionality*  |
|----------+---------+---------------|
| red      | uint8_t | value of red  |
| blue     | uint8_t | value of blue |
| green    | uint8_t | value of red  |
|----------+---------+---------------|


** Automatically configured
A list of structures which do not need to be configured or altered when using 
this library. If you have no intrestest in tinkering or learning how the internals
of this library works you can skip this section.

*** led_struct 

An array of /Led_struct/ is used to hold current colors of each led as well as an item used by the /remote controller/ library
to transmit the data to the led strip. 

The /led_struct/ structure holds an array of 24 /rmt_item32_t/ structures, 7 integers of which three represents the current 
color setting for a led, three representing a target color for modes such as fade which requires a target color. The last 
integer is a direction teller, however no mode is currently using it.


 - The /led_struct/:
 |---------------+---------+--------------------|
 | *Variable name* | *type*    | *function*           |
 |---------------+---------+--------------------|
 | r             | uint8_t | red value          |
 | g             | uint8_t | green value        |
 | b             | uint8_t | blue value         |
 | fadeR         | uint8_t | red target value   |
 | fadeG         | uint8_t | green target value |
 | fadeB         | uint8_t | blue target value  |
 | Dir           | uint8_t | direction value    |
 |---------------+---------+--------------------|


***  rmt_conf

Configuration file for the remote control driver library. 
/Note/: Output pin is set by /gpio_num/.

|----------------------+---------------|
| *Variable*             |         *Value* |
|----------------------+---------------|
| /struct rmt_conf/      |               |
|----------------------+---------------|
| rmt_mode             |   RMT_MODE_TX |
| channel              | RMT_CHANNEL_0 |
| gpio_num             |             4 |
| mem_block_num        |             1 |
| clk_div              |             8 |
|----------------------+---------------|
| /rmt_conf.tx_config/   |               |
|----------------------+---------------|
| loop_en              |             0 |
| carrier_en           |             0 |
| idle_outpu_en        |             1 |
| idle_level           |             0 |
| carrier_duty_percent |            50 |
| carrier_freq_hz      |        10 000 |
| carrier_level        |             1 |
|----------------------+---------------|

* Led Modes

*** walk

Moves each led one step backwards on the strip each update. 
The first led will jump the the last place. 

| *conf. variables* | *Purpose*          |
|-----------------+------------------|
| WalkRate        | Update rate (Hz) |
| Walk            | Enable/disable   |

- Associated Function:  stepForward

*** TODO fade
*** TODO smooth
*** TODO fadeWalk




